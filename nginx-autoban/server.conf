### Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:64m rate=10r/m ; 

### Lua blocker
lua_shared_dict banned_ips 32m ;

init_by_lua_block {

banned_ips = ngx.shared.banned_ips

}

### server.com

server {

  listen 0.0.0.0:80 ; 

  server_name server.com ; 

### Blocker


### check if client is banned 
  access_by_lua_block {

  local ip = ngx.var.remote_addr
  local ban, flags = banned_ips:get(ip)
  if ban then
    ngx.exit(ngx.HTTP_FORBIDDEN)
  else
    return
  end

  }

### location to ban 

  location @ban {
    content_by_lua_block {

      local ip = ngx.var.remote_addr
      local expire = 300  # time to ban client's ip, in seconds. 
      local ban, flags = banned_ips:get(ip)
      if not ban then
        banned_ips:set(ip, 1, expire)
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end

    }
  }

### Protected locations 

  location /login { 
      limit_req zone=api_limit burst=2 nodelay; 
      error_page 503 @ban ;
      proxy_pass http://127.0.0.1:8080 ;  # backend endpoint
  }

### Other locations

  location / {
      proxy_pass http://127.0.0.1:8080 ; 
  }

### Metrics and statistics

  location /ban_count {
    content_by_lua_block {
      local ips = banned_ips:get_keys(0)
      ngx.say("nginx_lua_blocked_ips " .. table.getn(ips) .. "\n")
    }
  }

  location /ban_dump {
    allow 127.0.0.1/32 ;
    deny all ;
    content_by_lua_block {

      local ips = banned_ips:get_keys(0)
      local output = ""
      for k,v in pairs(ips) do
        output = output .. v .. "\n"
      end
      ngx.say(output)

    }
  }
}

